{"version":3,"sources":["components/Card/Card.jsx","components/CardList/CardList.jsx","components/SearchBar/SearchBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBar","placeholder","handleChange","type","onChange","App","state","search","bind","fetch","then","response","json","fetchedMonsters","console","log","setState","e","userSearch","target","value","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAGaA,G,YAAO,SAACC,GACnB,OACE,sBAAKC,UAAU,OAAf,UACA,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aAAuDC,IAAI,KACjE,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,aCMTC,G,MAVE,SAACR,GAChB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACP,GAAD,OAClB,cAAC,EAAD,CAAMA,QAASA,WCMRQ,G,MAXG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC/B,OACE,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC0CDG,E,kDA7Cb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXR,SAAU,GACVS,OAAQ,IAGV,EAAKL,aAAe,EAAKA,aAAaM,KAAlB,gBAPR,E,gEASO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAElB,SAAUe,S,mCAQnBI,GACX,IAAMC,EAAaD,EAAEE,OAAOC,MAC5BC,KAAKL,SAAS,CAAET,OAAQW,M,+BAGhB,IAAD,EACsBG,KAAKf,MAA1BR,EADD,EACCA,SAAUS,EADX,EACWA,OACZe,EAAmBxB,EAASyB,QAAO,SAAC/B,GAAD,OACvCA,EAAQG,KAAK6B,cAAcC,SAASlB,EAAOiB,kBAE7C,OACE,sBAAKlC,UAAU,MAAf,UACA,oBAAIA,UAAU,YAAd,8BACE,cAAC,EAAD,CACEW,YAAY,sBACZC,aAAcmB,KAAKnB,eAErB,cAAC,EAAD,CAAUJ,SAAUwB,W,GAxCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2461415e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\nexport const Card = (props) => {\n  return (\n    <div className=\"card\">\n    <img src={`https://robohash.org/${props.monster.id}?set=set2`} alt=\"\"/>\n      <h1>{props.monster.name}</h1>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Card } from \"../Card/Card\";\nimport \"./CardList.css\";\n\nconst CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monster) => (\n        <Card monster={monster} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nimport \"./SearchBar.css\";\n\nconst SearchBar = ({placeholder, handleChange}) => {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default SearchBar;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/CardList/CardList\";\nimport SearchBar from \"./components/SearchBar/SearchBar\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      search: \"\",\n    };\n    // This binding is necessary to make `this` work in the method\n    this.handleChange = this.handleChange.bind(this);\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((fetchedMonsters) => {\n        console.log(fetchedMonsters);\n        this.setState({ monsters: fetchedMonsters });\n      });\n  }\n\n  // handleChange = (e) => {\n  //   const userSearch = e.target.value;\n  //   this.setState({search: userSearch});\n  // };\n  handleChange(e) {\n    const userSearch = e.target.value;\n    this.setState({ search: userSearch });\n  }\n\n  render() {\n    const { monsters, search } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(search.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n      <h1 className=\"heading-1\" >Monsters Rolodex</h1>\n        <SearchBar\n          placeholder=\"search your monster\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}